using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.IO;

namespace DNDStrongholdApp.Models
{
    public class Building
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public BuildingType Type { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Level { get; set; } = 1;
        public int MaxLevel { get; set; } = 1;
        public BuildingStatus ConstructionStatus { get; set; } = BuildingStatus.Planning;
        public int ConstructionProgress { get; set; } = 0; // 0-100%
        public int ConstructionTimeRemaining { get; set; } = 0; // in weeks
        public List<ResourceCost> ConstructionCost { get; set; } = new List<ResourceCost>();
        public int WorkerSlots { get; set; }
        public List<string> AssignedWorkers { get; set; } = new List<string>(); // NPC IDs
        public List<ResourceProduction> BaseProduction { get; set; } = new List<ResourceProduction>();
        public List<ResourceProduction> ActualProduction { get; set; } = new List<ResourceProduction>();
        public List<ResourceCost> BaseUpkeep { get; set; } = new List<ResourceCost>();
        public List<ResourceCost> ActualUpkeep { get; set; } = new List<ResourceCost>();
        public int Condition { get; set; } = 100; // 0-100%
        public int RepairTimeRemaining { get; set; } = 0; // in weeks
        public int RepairTime { get; set; } = 0; // Total repair time in weeks
        public List<ResourceCost> RepairCost { get; set; } = new List<ResourceCost>();
        public Project? CurrentProject { get; set; }
        public int UpgradeTimeRemaining { get; set; } = 0; // in weeks
        public int UpgradeTime { get; set; } = 0; // Total upgrade time in weeks
        public List<ResourceCost> UpgradeCost { get; set; } = new List<ResourceCost>();

        // Add new properties for construction points system:
        public int RequiredConstructionPoints { get; set; } = 0; // Total points needed to complete construction
        public int CurrentConstructionPoints { get; set; } = 0; // Points accumulated so far
        public int WeeklyConstructionPoints { get; set; } = 0; // Points generated by current workers per week

        // Constructor for a new building
        public Building(BuildingType type)
        {
            Type = type;
            Name = GetDefaultName(type);
            SetDefaultProperties();
        }

        // Set default properties based on building type
        private void SetDefaultProperties()
        {
            // Try multiple possible locations for the JSON file
            string[] possiblePaths = new[]
            {
                Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data", "BuildingData.json"),
                Path.Combine(Directory.GetCurrentDirectory(), "Data", "BuildingData.json"),
                Path.Combine(Directory.GetCurrentDirectory(), "..", "Data", "BuildingData.json"),
                Path.Combine(Directory.GetCurrentDirectory(), "..", "..", "..", "Data", "BuildingData.json")
            };

            string jsonPath = possiblePaths.FirstOrDefault(File.Exists);
            
            if (!string.IsNullOrEmpty(jsonPath))
            {
                string json = File.ReadAllText(jsonPath);
                var buildingData = JsonSerializer.Deserialize<BuildingData>(json);
                var buildingInfo = buildingData?.buildings.Find(b => b.type == Type.ToString());
                if (buildingInfo != null)
                {
                    WorkerSlots = buildingInfo.workerSlots;
                    RequiredConstructionPoints = buildingInfo.requiredConstructionPoints;
                    ConstructionCost = buildingInfo.constructionCost.Select(c => new ResourceCost { ResourceType = (ResourceType)Enum.Parse(typeof(ResourceType), c.resourceType), Amount = c.amount }).ToList();
                    MaxLevel = buildingInfo.maxLevel;
                }
                else
                {
                    SetFallbackProperties();
                }
            }
            else
            {
                SetFallbackProperties();
            }
            
            // Set repair costs to 50% of construction costs
            foreach (var cost in ConstructionCost)
            {
                RepairCost.Add(new ResourceCost 
                { 
                    ResourceType = cost.ResourceType, 
                    Amount = (int)(cost.Amount * 0.5f) 
                });
            }
            
            // Default repair time is 50% of construction time
            RepairTime = (int)(ConstructionTimeRemaining * 0.5f);
            if (RepairTime < 1) RepairTime = 1;
            RepairTimeRemaining = RepairTime;
        }

        private void SetFallbackProperties()
        {
            // Fallback to hardcoded values if JSON file is not found or building type not in JSON
            switch (Type)
            {
                case BuildingType.Farm:
                    WorkerSlots = 3;
                    RequiredConstructionPoints = 30;
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Gold, Amount = 50 });
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Wood, Amount = 30 });
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Stone, Amount = 10 });
                    break;
                case BuildingType.Watchtower:
                    WorkerSlots = 2;
                    RequiredConstructionPoints = 45;
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Gold, Amount = 40 });
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Wood, Amount = 20 });
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Stone, Amount = 30 });
                    break;
                case BuildingType.Quarry:
                    WorkerSlots = 4;
                    RequiredConstructionPoints = 60;
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Gold, Amount = 100 });
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Wood, Amount = 50 });
                    ConstructionCost.Add(new ResourceCost { ResourceType = ResourceType.Stone, Amount = 20 });
                    break;
                default:
                    WorkerSlots = 1;
                    RequiredConstructionPoints = 20;
                    MaxLevel = 5;
                    break;
            }
        }

        // Get default name based on building type
        private string GetDefaultName(BuildingType type)
        {
            return type.ToString();
        }

        // Update production based on assigned workers
        public void UpdateProduction(List<NPC> assignedNPCs)
        {
            // Use scaling for current level
            ActualProduction = new List<ResourceProduction>();
            var buildingData = LoadBuildingData();
            var buildingInfo = buildingData?.buildings.Find(b => b.type == Type.ToString());
            if (buildingInfo != null)
            {
                var level = Level;
                var prodAtLevel = buildingInfo.productionScaling.FirstOrDefault(p => p.level == level);
                if (prodAtLevel != null)
                {
                    // Get workers not assigned to the current project
                    var availableWorkers = assignedNPCs;
                    if (CurrentProject != null)
                    {
                        availableWorkers = assignedNPCs.Where(npc => 
                            !CurrentProject.AssignedWorkers.Contains(npc.Id)).ToList();
                    }

                    // If building is not functional, or no workers available, no production
                    if (!IsFunctional() ||
                        availableWorkers.Count == 0)
                    {
                        return;
                    }

                    // Calculate production for each resource type
                    foreach (var resource in prodAtLevel.resources)
                    {
                        int totalProduction = resource.perWorkerValue * availableWorkers.Count;
                        
                        // Add worker skill bonuses if applicable
                        var applicableBonuses = buildingInfo.workerProductionBonus.Where(b => b.resourceType == resource.resourceType);
                        foreach (var bonus in applicableBonuses)
                        {
                            foreach (var worker in availableWorkers)
                            {
                                var skill = worker.Skills.Find(s => s.Name == bonus.skill);
                                if (skill != null)
                                {
                                    totalProduction += (int)(skill.Level * bonus.bonusValue);
                                }
                            }
                        }

                        ActualProduction.Add(new ResourceProduction
                        {
                            ResourceType = (ResourceType)Enum.Parse(typeof(ResourceType), resource.resourceType),
                            Amount = totalProduction
                        });
                    }
                }
            }
        }

        // Helper to load building data
        private BuildingData LoadBuildingData()
        {
            string jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data", "BuildingData.json");
            if (File.Exists(jsonPath))
            {
                string json = File.ReadAllText(jsonPath);
                return JsonSerializer.Deserialize<BuildingData>(json);
            }
            return null;
        }

        // method to get Max Level
        public int GetMaxLevel()
        {
            return MaxLevel;
        }

        // Update construction progress based on assigned workers
        public void UpdateConstructionProgress(List<NPC> assignedNPCs)
        {
            if (ConstructionStatus != BuildingStatus.UnderConstruction && 
                ConstructionStatus != BuildingStatus.Repairing &&
                ConstructionStatus != BuildingStatus.Upgrading)
                return;

            // Calculate weekly construction points from workers
            WeeklyConstructionPoints = 0;
            foreach (var workerId in AssignedWorkers)
            {
                var worker = assignedNPCs.Find(n => n.Id == workerId);
                if (worker != null)
                {
                    // Base 1 point + construction skill level
                    var constructionSkill = worker.Skills.Find(s => s.Name == "Construction");
                    int skillLevel = constructionSkill?.Level ?? 0;
                    WeeklyConstructionPoints += 1 + skillLevel;
                }
            }

            // Update construction time remaining
            if (WeeklyConstructionPoints > 0)
            {
                int pointsRemaining = RequiredConstructionPoints - CurrentConstructionPoints;
                ConstructionTimeRemaining = (int)Math.Ceiling((double)pointsRemaining / WeeklyConstructionPoints);
            }
            else
            {
                ConstructionTimeRemaining = int.MaxValue; // No workers, construction won't progress
            }
        }

        // Progress construction by one week
        public bool AdvanceConstruction()
        {
            if (ConstructionStatus != BuildingStatus.UnderConstruction)
                return false;

            // No progress if no workers are assigned
            if (AssignedWorkers.Count == 0)
                return false;

            // Add weekly construction points
            CurrentConstructionPoints += WeeklyConstructionPoints;
            
            // Update progress percentage
            ConstructionProgress = (int)((float)CurrentConstructionPoints / RequiredConstructionPoints * 100);

            // Check if construction is complete
            if (CurrentConstructionPoints >= RequiredConstructionPoints)
            {
                ConstructionStatus = BuildingStatus.Complete;
                ConstructionProgress = 100;
                return true; // Construction completed
            }

            return false; // Still under construction
        }
        
        // Progress repair by one week
        public bool AdvanceRepair()
        {
            if (ConstructionStatus != BuildingStatus.Repairing)
                return false;

            // No progress if no workers are assigned
            if (AssignedWorkers.Count == 0)
                return false;

            // Add weekly construction points
            CurrentConstructionPoints += WeeklyConstructionPoints;
            
            // Update progress percentage
            ConstructionProgress = (int)((float)CurrentConstructionPoints / RequiredConstructionPoints * 100);

            // Check if repair is complete
            if (CurrentConstructionPoints >= RequiredConstructionPoints)
            {
                ConstructionStatus = BuildingStatus.Complete;
                Condition = 100;
                return true;
            }
            
            return false;
        }
        
        // Start repair process
        public bool StartRepair(List<Resource> availableResources)
        {
            if (ConstructionStatus != BuildingStatus.Damaged)
                return false;
                
            // Calculate repair costs (50% of construction cost)
            RepairCost = new List<ResourceCost>();
            foreach (var cost in ConstructionCost)
            {
                RepairCost.Add(new ResourceCost
                {
                    ResourceType = cost.ResourceType,
                    Amount = (int)(cost.Amount * 0.5f)
                });
            }

            // Check if we have enough resources
            foreach (var cost in RepairCost)
            {
                var resource = availableResources.Find(r => r.Type == cost.ResourceType);
                if (resource == null || resource.Amount < cost.Amount)
                {
                    return false; // Not enough resources
                }
            }
            
            // Consume resources
            foreach (var cost in RepairCost)
            {
                var resource = availableResources.Find(r => r.Type == cost.ResourceType);
                if (resource != null)
                {
                    resource.Amount -= cost.Amount;
                }
            }

            // Calculate required construction points based on damage
            float damagePercentage = (100 - Condition) / 100f;
            RequiredConstructionPoints = (int)(RequiredConstructionPoints * damagePercentage);
            CurrentConstructionPoints = 0;
            WeeklyConstructionPoints = 0; // Will be calculated when workers are assigned
            
            // Start repair
            ConstructionStatus = BuildingStatus.Repairing;
            return true;
        }

        // Progress upgrade by one week
        public bool AdvanceUpgrade()
        {
            if (ConstructionStatus != BuildingStatus.Upgrading)
                return false;

            // No progress if no workers are assigned
            if (AssignedWorkers.Count == 0)
                return false;

            // Add weekly construction points
            CurrentConstructionPoints += WeeklyConstructionPoints;
            
            // Update progress percentage
            ConstructionProgress = (int)((float)CurrentConstructionPoints / RequiredConstructionPoints * 100);

            // Check if upgrade is complete
            if (CurrentConstructionPoints >= RequiredConstructionPoints)
            {
                ConstructionStatus = BuildingStatus.Complete;
                Level++;
                return true;
            }

            return false;
        }

        // Start upgrade process
        public bool StartUpgrade(List<Resource> availableResources)
        {
            if (ConstructionStatus != BuildingStatus.Complete || Level >= GetMaxLevel())
                return false;

            // Calculate upgrade costs (50% + 10% per level of construction cost)
            float upgradeCostMultiplier = 0.5f + (0.1f * Level);
            UpgradeCost = new List<ResourceCost>();
            foreach (var cost in ConstructionCost)
            {
                UpgradeCost.Add(new ResourceCost
                {
                    ResourceType = cost.ResourceType,
                    Amount = (int)(cost.Amount * upgradeCostMultiplier)
                });
            }

            // Check if we have enough resources
            foreach (var cost in UpgradeCost)
            {
                var resource = availableResources.Find(r => r.Type == cost.ResourceType);
                if (resource == null || resource.Amount < cost.Amount)
                {
                    return false; // Not enough resources
                }
            }

            // Consume resources
            foreach (var cost in UpgradeCost)
            {
                var resource = availableResources.Find(r => r.Type == cost.ResourceType);
                if (resource != null)
                {
                    resource.Amount -= cost.Amount;
                }
            }

            // Calculate required construction points using the same multiplier as costs
            RequiredConstructionPoints = (int)(RequiredConstructionPoints * upgradeCostMultiplier);
            CurrentConstructionPoints = 0;
            WeeklyConstructionPoints = 0; // Will be calculated when workers are assigned

            // Start upgrade
            ConstructionStatus = BuildingStatus.Upgrading;
            return true;
        }

        // Damage the building
        public void Damage(int damageAmount)
        {
            // Reduce condition
            Condition -= damageAmount;
            
            // If condition falls below 50%, building becomes damaged
            if (Condition < 50 && ConstructionStatus == BuildingStatus.Complete)
            {
                ConstructionStatus = BuildingStatus.Damaged;
                // Cancel any ongoing project
                if (CurrentProject != null)
                {
                    CurrentProject = null;
                }
            }
            
            // Ensure condition doesn't go below 0
            if (Condition < 0)
            {
                Condition = 0;
            }
        }

        // Start a project
        public bool StartProject(Project project, List<Resource> availableResources)
        {
            if (ConstructionStatus != BuildingStatus.Complete || CurrentProject != null)
                return false;

            // Check if we have enough resources
            foreach (var cost in project.InitialCost)
            {
                var resource = availableResources.Find(r => r.Type == cost.ResourceType);
                if (resource == null || resource.Amount < cost.Amount)
                {
                    return false; // Not enough resources
                }
            }

            // Consume resources
            foreach (var cost in project.InitialCost)
            {
                var resource = availableResources.Find(r => r.Type == cost.ResourceType);
                if (resource != null)
                {
                    resource.Amount -= cost.Amount;
                }
            }

            // Assign current workers to the project
            project.AssignedWorkers = new List<string>(AssignedWorkers);
            CurrentProject = project;

            return true;
        }

        // Cancel current project
        public void CancelProject()
        {
            if (CurrentProject != null)
            {
                CurrentProject = null;
            }
        }

        // Check if any project workers are unavailable
        public bool AreProjectWorkersAvailable(List<NPC> allNPCs)
        {
            if (CurrentProject == null) return true;

            foreach (var workerId in CurrentProject.AssignedWorkers)
            {
                var worker = allNPCs.Find(n => n.Id == workerId);
                // A worker is unavailable if they don't exist or if they're not in an Available state
                if (worker == null || worker.Status != NPCStatus.Available)
                {
                    return false;
                }
            }
            return true;
        }

        
        // Check if the building is functional
        public bool IsFunctional()
        {
            return ConstructionStatus == BuildingStatus.Complete;
        }


        public int GetWorkerSlots()
        {
            int baseSlots = WorkerSlots;
            if (Type == BuildingType.Quarry)
            {
                return baseSlots + (Level - 1); // +1 slot per level after level 1
            }
            return baseSlots;
        }

        public List<ResourceProduction> CalculateProduction(List<NPC> workers)
        {
            var production = new List<ResourceProduction>();
            var buildingData = LoadBuildingData();
            var buildingInfo = buildingData?.buildings.Find(b => b.type == Type.ToString());
            if (buildingInfo != null)
            {
                var level = Level;
                var prodAtLevel = buildingInfo.productionScaling.FirstOrDefault(p => p.level == level);
                if (prodAtLevel != null)
                {
                    foreach (var resource in prodAtLevel.resources)
                    {
                        int totalProduction = resource.perWorkerValue * workers.Count;
                        // Add worker skill bonuses if applicable
                        var applicableBonuses = buildingInfo.workerProductionBonus
                            .Where(b => b.resourceType == resource.resourceType);
                        foreach (var bonus in applicableBonuses)
                        {
                            foreach (var worker in workers)
                            {
                                var skill = worker.Skills.Find(s => s.Name == bonus.skill);
                                if (skill != null)
                                {
                                    totalProduction += (int)(skill.Level * bonus.bonusValue);
                                }
                            }
                        }
                        production.Add(new ResourceProduction
                        {
                            ResourceType = (ResourceType)Enum.Parse(typeof(ResourceType), resource.resourceType),
                            Amount = totalProduction
                        });
                    }
                }
            }
            return production;
        }

        public List<ResourceCost> CalculateUpkeep(List<NPC> workers)
        {
            var upkeep = new List<ResourceCost>();
            var buildingData = LoadBuildingData();
            var buildingInfo = buildingData?.buildings.Find(b => b.type == Type.ToString());
            if (buildingInfo != null)
            {
                var level = Level;
                var upkeepAtLevel = buildingInfo.upkeepScaling.Where(u => u.level == level);
                foreach (var up in upkeepAtLevel)
                {
                    upkeep.Add(new ResourceCost
                    {
                        ResourceType = (ResourceType)Enum.Parse(typeof(ResourceType), up.resourceType),
                        Amount = up.baseValue
                    });
                }
            }
            return upkeep;
        }

        // Start construction if workers are assigned
        public bool StartConstruction()
        {
            if (ConstructionStatus != BuildingStatus.Planning || AssignedWorkers.Count == 0)
                return false;

            ConstructionStatus = BuildingStatus.UnderConstruction;
            CurrentConstructionPoints = 0;
            return true;
        }

        public void AssignWorkers(List<string> workerIds)
        {
            // Clear existing assignments
            AssignedWorkers.Clear();
            
            // Add new assignments
            AssignedWorkers.AddRange(workerIds);
            
            // Update construction progress if under construction
            if (ConstructionStatus == BuildingStatus.UnderConstruction)
            {
                // Note: UpdateConstructionProgress will be called by GameStateService with the NPC list
            }
        }

        public void CancelConstruction()
        {
            if (ConstructionStatus == BuildingStatus.Planning)
            {
                // Unassign all workers
                AssignedWorkers.Clear();
                
                // Reset construction status
                ConstructionStatus = BuildingStatus.Planning;
                ConstructionProgress = 0;
                RequiredConstructionPoints = 0;
                CurrentConstructionPoints = 0;
                
                // Note: Resource refunding is handled by GameStateService
            }
        }

        // Award XP to assigned workers for building skills (to be called on Next Turn)
        public void AwardWorkerSkillXP(List<NPC> allNPCs)
        {
            // Construction/repair/upgrade XP
            if ((ConstructionStatus == BuildingStatus.UnderConstruction ||
                 ConstructionStatus == BuildingStatus.Repairing ||
                 ConstructionStatus == BuildingStatus.Upgrading) &&
                AssignedWorkers != null && AssignedWorkers.Count > 0)
            {
                foreach (var workerId in AssignedWorkers)
                {
                    var npc = allNPCs.Find(n => n.Id == workerId);
                    if (npc == null) continue;
                    int constructionXP = Random.Shared.Next(5, 11); // 5-10
                    int laborXP = Random.Shared.Next(0, 6); // 0-5
                    npc.AddSkillExperience("Construction", constructionXP);
                    npc.AddSkillExperience("Labor", laborXP);
                }
                return; // Do not also grant functional building XP
            }

            // Functional building XP
            if (!IsFunctional() || AssignedWorkers == null || AssignedWorkers.Count == 0)
                return;

            var buildingData = LoadBuildingData();
            var buildingInfo = buildingData?.buildings.Find(b => b.type == Type.ToString());
            if (buildingInfo == null)
                return;

            foreach (var workerId in AssignedWorkers)
            {
                var npc = allNPCs.Find(n => n.Id == workerId);
                if (npc == null) continue;

                // Primary skill XP: 5-10
                if (!string.IsNullOrEmpty(buildingInfo.primarySkill))
                {
                    int xp = Random.Shared.Next(5, 11); // 5 to 10 inclusive
                    npc.AddSkillExperience(buildingInfo.primarySkill, xp);
                }

                // Secondary skill XP: 0-10
                if (!string.IsNullOrEmpty(buildingInfo.secondarySkill))
                {
                    int xp = Random.Shared.Next(0, 11); // 0 to 10 inclusive
                    npc.AddSkillExperience(buildingInfo.secondarySkill, xp);
                }

                // Tertiary skill XP: 0-5
                if (!string.IsNullOrEmpty(buildingInfo.tertiarySkill))
                {
                    int xp = Random.Shared.Next(0, 6); // 0 to 5 inclusive
                    npc.AddSkillExperience(buildingInfo.tertiarySkill, xp);
                }
            }
        }
    }

    public enum BuildingType
    {
        Farm,
        Watchtower,
        Smithy,
        Laboratory,
        Chapel,
        Mine,
        Barracks,
        Library,
        TradeOffice,
        Stables,
        Tavern,
        MasonsYard,
        Workshop,
        Granary,
        Quarry
    }

    public enum BuildingStatus
    {
        Planning,
        UnderConstruction,
        Complete,
        Damaged,
        Repairing,
        Upgrading
    }

    public class ResourceCost
    {
        public ResourceType ResourceType { get; set; }
        public int Amount { get; set; }
    }

    public class ResourceProduction
    {
        public ResourceType ResourceType { get; set; }
        public int Amount { get; set; }
    }

    public class Project
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<ResourceCost> InitialCost { get; set; } = new List<ResourceCost>();
        public int Duration { get; set; } // in weeks
        public int TimeRemaining { get; set; } // in weeks
        public List<string> AssignedWorkers { get; set; } = new List<string>(); // NPC IDs
        public List<ResourceProduction> OngoingEffects { get; set; } = new List<ResourceProduction>();
        public List<ResourceProduction> CompletionEffects { get; set; } = new List<ResourceProduction>();
        public bool IsActive { get; set; } = true;
    }

    // Classes for JSON deserialization
    public class BuildingData
    {
        public List<BuildingInfo> buildings { get; set; } = new List<BuildingInfo>();
    }

    public class BuildingInfo
    {
        public string type { get; set; } = string.Empty;
        public int workerSlots { get; set; }
        public int requiredConstructionPoints { get; set; }
        public int maxLevel { get; set; } = 1;
        public List<LevelIncrease> workerSlotIncrease { get; set; } = new List<LevelIncrease>();
        public List<LevelResourceValue> productionScaling { get; set; } = new List<LevelResourceValue>();
        public List<LevelUpkeepValue> upkeepScaling { get; set; } = new List<LevelUpkeepValue>();
        public List<WorkerBonusInfo> workerProductionBonus { get; set; } = new List<WorkerBonusInfo>();
        public List<ResourceCostInfo> constructionCost { get; set; } = new List<ResourceCostInfo>();
        public List<AvailableProjectInfo> availableProjects { get; set; } = new List<AvailableProjectInfo>();
        public string primarySkill { get; set; } = string.Empty;
        public string secondarySkill { get; set; } = string.Empty;
        public string tertiarySkill { get; set; } = string.Empty;
    }

    public class LevelIncrease
    {
        public int level { get; set; }
        public int increase { get; set; }
    }

    public class LevelResourceValue
    {
        public int level { get; set; }
        public List<ResourceScaling> resources { get; set; } = new List<ResourceScaling>();
    }

    public class ResourceScaling
    {
        public string resourceType { get; set; } = string.Empty;
        public int perWorkerValue { get; set; }
    }

    public class LevelUpkeepValue
    {
        public int level { get; set; }
        public string resourceType { get; set; } = string.Empty;
        public int baseValue { get; set; }
    }

    public class WorkerBonusInfo
    {
        public string resourceType { get; set; } = string.Empty;
        public string skill { get; set; } = string.Empty;
        public decimal bonusValue { get; set; }
    }

    public class ResourceCostInfo
    {
        public string resourceType { get; set; } = string.Empty;
        public int amount { get; set; }
    }

    public class ResourceProductionInfo
    {
        public string resourceType { get; set; } = string.Empty;
        public int amount { get; set; }
    }

    public class AvailableProjectInfo
    {
        public string projectName { get; set; } = string.Empty;
        public int minLevel { get; set; }
    }
} 